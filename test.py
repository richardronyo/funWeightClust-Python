# test_mixture.py
import skfda
import numpy as np
import modelSimulation as sim
from sklearn import metrics as met
from skewfunHDDC import _T_funhddt_m_step1, _T_funhddt_e_step1
from scipy import linalg as scil


from py_mixture import C_mstep

if __name__ == "__main__":
    datax = sim.genModelFD(ncurves=9, nsplines=7, alpha=[0.9, 0.9, 0.9], eta=[10, 5, 15])
    datay = sim.genModelFD(ncurves=9, nsplines=8, alpha=[0.9, 0.9, 0.9], eta=[10, 5, 15])
    fdobj = datax['data']  # Assuming data is a list with fdobj at index 0
    fdobjy = datay['data']  # Assuming fdobjy is at index 1
    N = 9
    p = 7
    q = 8
    K = 4

    """
                  [,1]      [,2]       [,3]      [,4]
        [1,] 0.1386920 0.4736886 0.09821989 0.2893995
        [2,] 0.2634635 0.2358751 0.28971799 0.2109434
        [3,] 0.1864560 0.3335034 0.26260827 0.2174324
        [4,] 0.4009334 0.1485603 0.07463583 0.3758704
        [5,] 0.2652814 0.1247790 0.37873804 0.2312015
        [6,] 0.2634635 0.2358751 0.28971799 0.2109434
        [7,] 0.1864560 0.3335034 0.26260827 0.2174324
        [8,] 0.4009334 0.1485603 0.07463583 0.3758704
        [9,] 0.2652814 0.1247790 0.37873804 0.2312015
    """

    t = np.array([[0.1386920, 0.4736886, 0.09821989, 0.2893995], 
                  [0.2634635, 0.2358751, 0.28971799, 0.2109434],
                  [0.1864560, 0.3335034, 0.26260827, 0.2174324], 
                  [0.4009334, 0.1485603, 0.07463583, 0.3758704],
                  [0.2652814, 0.1247790, 0.37873804, 0.2312015],
                  [0.2634635, 0.2358751, 0.28971799, 0.2109434],
                  [0.1864560, 0.3335034, 0.26260827, 0.2174324], 
                  [0.4009334, 0.1485603, 0.07463583, 0.3758704],
                  [0.2652814, 0.1247790, 0.37873804, 0.2312015]]) 
    t = t / np.sum(t, axis=1, keepdims=True)

    #bigDATA = np.random.rand(p+1, N)  # Example bigDATA, adjust dimensions as needed
    #W should be symmetric
    W = np.array([[3.57142857, 2.187510807, 0.461282867,  0.02976911, 0.000000000, 0.000000000, 0.00000000],
                    [2.18751081, 5.535671059, 3.906319524,  0.86307362, 0.007442277, 0.000000000, 0.00000000],
                    [0.46128287, 3.906319524, 8.169562887,  5.61510914, 0.590268892, 0.007442277, 0.00000000],
                    [0.02976911, 0.863073625, 5.615109144, 11.98410777, 5.615109144, 0.863073625, 0.02976911],
                    [0.00000000, 0.007442277, 0.590268892,  5.61510914, 8.169562887, 3.906319524, 0.46128287],
                    [0.00000000, 0.000000000, 0.007442277,  0.86307362, 3.906319524, 5.535671059, 2.18751081],
                    [0.00000000, 0.000000000, 0.000000000,  0.02976911, 0.461282867, 2.187510807, 3.57142857]])

    W_m = scil.cholesky(W)
    dety = scil.det(W)
    Wlist = {'W': W, 'W_m': W_m, 'dety':dety}

    """
  > print(datax$fd$coefs)
                [,1]       [,2]        [,3]       [,4]       [,5]      [,6]        [,7]        [,8]        [,9]
bspl4.1   7.0972616 24.4621685  -5.3465868 -2.9042618  -4.119764  6.906815  -3.0440567 11.92529688   1.7425874
bspl4.2   8.1572632 49.3508728  -0.3830047 -0.4063338   2.958355  5.616563  18.8220580 22.04662684  15.8331692
bspl4.3  49.2927714 42.6648707  51.4227271 84.4321497  77.792000 73.560023   5.3534098  0.04847252  -0.2593871
bspl4.4 100.9648684 94.8749855 100.2759374  2.2716192 -16.523747 -6.523302  77.9688138 74.66118221  78.5307185
bspl4.5   0.5893732  6.6944494  -3.9766077 41.4284958  46.980161 46.395548  -0.7312554 -2.41722160   2.5058592
bspl4.6  -2.8306504 10.3444208   2.5514511  1.9706571  -4.316811  7.016178   1.3982307 -2.20071376  -4.0380333
bspl4.7   1.7175008 -0.2627107  -2.4359856  0.3859413 -11.784380  5.340473 102.6986097 95.40395199 101.5510831
    """

    fdobj_coefficients = np.array([[7.0972616, 24.4621685,  -5.3465868, -2.9042618,  -4.119764,  6.906815, -3.0440567, 11.92529688,   1.7425874],
                                   [8.1572632, 49.3508728,  -0.3830047, -0.4063338,   2.958355,  5.616563,  18.8220580, 22.04662684,  15.8331692],
                                   [49.2927714, 42.6648707,  51.4227271, 84.4321497,  77.792000, 73.560023,   5.3534098,  0.04847252,  -0.2593871],
                                   [100.9648684, 94.8749855, 100.2759374,  2.2716192, -16.523747, -6.523302,  77.9688138, 74.66118221,  78.5307185],
                                   [0.5893732,  6.6944494,  -3.9766077, 41.4284958,  46.980161, 46.395548,  -0.7312554, -2.41722160,   2.5058592],
                                   [-2.8306504, 10.3444208,   2.5514511,  1.9706571,  -4.316811,  7.016178,   1.3982307, -2.20071376,  -4.0380333],
                                   [1.7175008, -0.2627107,  -2.4359856,  0.3859413, -11.784380,  5.340473, 102.6986097, 95.40395199, 101.5510831]])
    
    """
                 [,1]       [,2]      [,3]       [,4]       [,5]      [,6]      [,7]        [,8]      [,9]
bspl4.1  12.0693553 -18.382965 30.635155 -2.1090799  3.4837097 -2.026242  7.255764  -0.7322901 -5.583687
bspl4.2  -9.0591173 -31.580793 38.251916  4.3534292  5.7222488 -3.934245 -6.256308   5.7951324 10.080428
bspl4.3  44.2324548  55.740813 50.654771 76.8839431 81.4501038 75.991126 18.067926  15.5917531 19.614540
bspl4.4 101.8099206 117.810280 93.676212  7.4945588 -0.1623408 -2.615551 -1.077280   0.5881263  3.141208
bspl4.5  -1.7466609   6.227934  1.248237 40.2249941 41.4469345 36.392340 83.843139  83.3849551 78.438293
bspl4.6   3.7612426  16.976105  7.048900  4.4919236 -5.5458764 -2.325400  1.067050   3.4437255 -5.903717
bspl4.7   2.1915355   4.209537  9.046031 -1.4286797 -0.1712761  0.016898 -2.856816   2.5391099  1.691686
bspl4.8  -0.3796015  -7.900442 -8.562928 -0.3525983  2.1008039  2.076924 94.841288 101.1959355 95.095005
    """
    
    fdobjy_coefficients = np.array([[12.0693553, -18.382965, 30.635155, -2.1090799,  3.4837097, -2.026242,  7.255764,  -0.7322901, -5.583687],
                                    [-9.0591173, -31.580793, 38.251916,  4.3534292,  5.7222488, -3.934245, -6.256308,   5.7951324, 10.080428],
                                    [44.2324548,  55.740813, 50.654771, 76.8839431, 81.4501038, 75.991126, 18.067926,  15.5917531, 19.614540],
                                    [101.8099206, 117.810280, 93.676212,  7.4945588, -0.1623408, -2.615551, -1.077280,   0.5881263,  3.141208],
                                    [-1.7466609,   6.227934,  1.248237, 40.2249941, 41.4469345, 36.392340, 83.843139,  83.3849551, 78.438293],
                                    [3.7612426,  16.976105,  7.048900,  4.4919236, -5.5458764, -2.325400,  1.067050,   3.4437255, -5.903717],
                                    [2.1915355,   4.209537, 9.046031, -1.4286797, -0.1712761,  0.016898, -2.856816,   2.5391099,  1.691686],
                                    [-0.3796015, -7.900442, -8.562928, -0.3525983,  2.1008039,  2.076924, 94.841288, 101.1959355, 95.095005]])
    
    fdobj.coefficients = fdobj_coefficients.T
    fdobjy.coefficients = fdobjy_coefficients.T

    DATA = fdobj_coefficients
    intermediate_bigDATA = W@(DATA)

    ones_row = np.ones((1, N))
    bigDATA = np.vstack((intermediate_bigDATA, ones_row))
    

    model = 'AKBKQKDK'  # Example model, adjust as needed
    modely = 'EII'  # Example modely, adjust as needed
    threshold = 0.5  # Example threshold, adjust as needed
    method = 'cattell'  # Example method, adjust as needed
    noise_ctrl = False  # Example noise_ctrl, adjust as needed
    com_dim = 4 # Example com_dim, adjust as needed
    d_max = 100  # Example d_max, adjust as needed
    d_set = np.array([2, 2, 2, 2])  # Example d_set, adjust as needed

    corX = t
    print("-----------------------------------------------------------------------------------------------------")
    par = _T_funhddt_m_step1(fdobj, bigDATA, fdobjy, Wlist, N, p, q, K, t, model, modely, threshold, method, noise_ctrl, d_set, com_dim, d_max)
    print("model: ", par['model'])
    print("modely: ", par['modely'])
    print("ev:\t", par['ev'].shape, "\n", par['ev'])
    print("a:\n", par['a'])
    print("b:\n", par['b'])
    print("d:\n", par['d'])
    print("mu:\n", par['mu'])
    print("prop:\n", par['prop'])
    print("gami:\t", par['gam'].shape, "\n", par['gam'])
    print("covy\t", par['covy'].shape, "\n:", par['covy'])
    print("icovyi:\t", par['icovy'].shape, "\n", par['icovy'])
    print("logi:\n", par['logi'])
    print("-----------------------------------------------------------------------------------------------------")
    e = _T_funhddt_e_step1(fdobj, bigDATA, fdobjy, Wlist, N, p, q, par)
    print("t:\t", e['t'].shape, "\n", e['t'])
    print("L:\n", e['L'])
    print("mah_pen:\n", e['mah_pen'])
    print("K_pen:\n", e['K_pen'])
    print("mah_pen1:\n", e['mah_pen1'])


    with open("Python_mstep_output.txt", "w") as file:
        for (key, value) in par.items():
            file.write(f"{key}:\n {value}\n")
    
    with open("Python_estep_output.txt", "w") as file:
        for (key, value) in e.items():
            file.write(f"{key}:\n {value}\n")
